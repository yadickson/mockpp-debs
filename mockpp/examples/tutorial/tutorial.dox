/***************************************************************************
             tutorial.dox - a mockpp tutorial

                             -------------------
    begin                : Sun 2 Jan 2005
    copyright            : (C) 2002-2010 by Ewald Arnold
    email                : mockpp at ewald-arnold dot de

  $Id: tutorial.dox 1491 2010-01-02 22:21:45Z ewald-arnold $

 ***************************************************************************/

/*! \mainpage A Mockpp Tutorial

<hr>

\section content Table of contents

 - \ref problem     <br>
 - \ref basic_mo    <br>
 - \ref visit_mo    <br>
 - \ref visit2_mo   <br>
 - \ref chain_mo    <br>
 - \ref chain2_mo   <br>
 - \ref poor_mo     <br>
 - \ref poor_se_mo  <br>
 - \ref cppunit     <br>
 - \ref verifying   <br>

<hr> <!-- ------------------------------------------------------------ -->

\section problem   The Problem

To demonstrate the various elements of \c mockpp a rather simple testing problem will be
solved in different ways. There is a class \c Consumer which loads a configuration file.
This file is a simple text file with a data record in each line. Each line will be processed
and written back in a modified form at the end. For simplicity the string "/processed" is
appended to the original record. While processing the data a method \c calculate is invoked
with not exactly defined values.

\c Consumer uses another class derived from the pure virtual class
\c Interface which provides methods for opening, reading and writing the data file:

\code
class Interface
{
 public:
  virtual void open(const std::string &name) = 0;
  virtual std::string read() = 0;
  virtual unsigned calculate(unsigned input) = 0;
  virtual void write(const std::string &data) = 0;
  virtual void close() = 0;
};
\endcode

This is a rather common testing problem: there are two or more classes that depend
on each other. When you want to test \c Consumer from this example you should pass
it an object with predictible
behavour, a so-called mock object. Creating an input file in this case and checking
the output manually after every change in the sources
would become too boring.

A mock object is totally different from the
object used in production code and only used for testing. Ideally it is derived from
the same base class as the production code.

The following sections will introduce into the most important elements of \c mockpp by
developing different solutions.

All files are present as working source code to start playing with them under
\c mockpp/examples/tutorial .

Next: \ref basic_mo

\ref content

*/
