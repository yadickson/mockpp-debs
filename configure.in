dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.am)

# autoconf 2.50 or higher to rebuild aclocal.m4, because the
# AC_CREATE_PREFIX_CONFIG_H macro needs the AS_DIRNAME macro.
AC_PREREQ(2.50)

# Making releases:
#   MOCKPP_MINOR_VERSION += 1; ==> Major changes
#   MOCKPP_PATCH_VERSION += 1; ==> Minor changes

#   MOCKPP_MICRO_VERSION += 1;
#   MOCKPP_INTERFACE_AGE += 1;
#   MOCKPP_BINARY_AGE    += 1;
# if any functions have been added, set MOCKPP_INTERFACE_AGE to 0.
# if backwards compatibility has been broken, set MOCKPP_BINARY_AGE and MOCKPP_INTERFACE_AGE to 0.
#
MOCKPP_MAJOR_VERSION=1
MOCKPP_MINOR_VERSION=16
MOCKPP_PATCH_VERSION=6

MOCKPP_MICRO_VERSION=45
MOCKPP_INTERFACE_AGE=1
MOCKPP_BINARY_AGE=9

MOCKPP_VERSION=$MOCKPP_MAJOR_VERSION.$MOCKPP_MINOR_VERSION.$MOCKPP_PATCH_VERSION

AC_SUBST(MOCKPP_MAJOR_VERSION)
AC_SUBST(MOCKPP_MINOR_VERSION)
AC_SUBST(MOCKPP_MICRO_VERSION)
AC_SUBST(MOCKPP_INTERFACE_AGE)
AC_SUBST(MOCKPP_BINARY_AGE)
AC_SUBST(MOCKPP_VERSION)

# libtool versioning
LT_RELEASE=$MOCKPP_MAJOR_VERSION.$MOCKPP_MINOR_VERSION
LT_CURRENT=`expr $MOCKPP_MICRO_VERSION - $MOCKPP_INTERFACE_AGE`
LT_REVISION=$MOCKPP_INTERFACE_AGE
LT_AGE=`expr $MOCKPP_BINARY_AGE - $MOCKPP_INTERFACE_AGE`

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

AC_CONFIG_MACRO_DIR(config)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(mockpp, $MOCKPP_VERSION)

AC_SUBST(all_includes)
AC_SUBST(all_libraries)

# ----------------------------------------------------------------------------

dnl Checks for programs.

AC_PROG_MAKE_SET
AC_PROG_INSTALL

# The libtool macro AC_PROG_LIBTOOL checks for the C preprocessor.
# Configure gets confused if we try to check for a C preprocessor
# without first checking for the C compiler
# (see http://sources.redhat.com/ml/autoconf/2001-07/msg00036.html),
# so we invoke AC_PROG_CC explicitly.
AC_PROG_CC
AC_PROG_CXX
AC_LANG(C++)

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

# ----------------------------------------------------------------------------

EA_EXTRA_LIB=""
EA_EXTRA_INC=""

m4_pattern_allow([^AM_PATH_CPPUNIT$])

AC_DEFUN([EA_CHECK_LIBCPPUNIT],
[

AC_ARG_ENABLE(cppunit, [  --enable-cppunit        use cppunit as framework, unless cxxtest selected (no) ], [enable_cppunit=yes])

if test x$no_cppunit = x; then
  if test x$enable_cppunit = xyes; then
    AM_PATH_CPPUNIT(1.10.0,
      AC_DEFINE(HAVE_CPPUNIT, 1, [Define if you have CppUnit installed.]),
      AH_TEMPLATE(HAVE_CPPUNIT, [Define if you have CppUnit installed.]))

    EA_EXTRA_INC="$EA_EXTRA_INC $CPPUNIT_CFLAGS"
    echo "*******************************************************"
    echo "**  using cppunit framework"
    echo "*******************************************************"
    AC_DEFINE(MOCKPP_USE_CPPUNIT, 1, [Define to use cppunit as framework.])
  else
    echo "*******************************************************"
    echo "**  NOT using cppunit framework"
    echo "*******************************************************"
    AH_TEMPLATE(MOCKPP_USE_CPPUNIT, [Define to use cppunit as framework.])
  fi
fi
])

# ----------------------------------------------------------------------------

AC_DEFUN([EA_CHECK_WSTRING],
[

AC_MSG_CHECKING([for std::wstring])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

cat > conftest.$ac_ext <<EOF
#include <string>
int main()
{
  std::wstring s;
}
EOF

ac_compile_link='${CXX} $CXXFLAGS $all_includes $all_libraries $CPPFLAGS conftest.$ac_ext'
if AC_TRY_EVAL(ac_compile_link); then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_WSTRING, 1, [Define if you have the std::wstring type.])
else
  AC_MSG_RESULT(no)
fi

AC_SUBST(HAVE_WSTRING)
AC_LANG_RESTORE
])

# ----------------------------------------------------------------------------

AC_DEFUN([EA_CHECK_LIBDL],
[
LIBDL=
AC_CHECK_LIB(dl, dlsym, [
ac_cv_have_libdl=yes
LIBDL=-ldl
AC_DEFINE(HAVE_LIBDL, 1, [Define if you have libdl])
])
])
AC_SUBST(LIBDL)

# ----------------------------------------------------------------------------

AC_DEFUN([EA_ENABLE_DOXYGEN],[

AC_ARG_ENABLE(doxygen, [  --enable-doxygen        enable documentation generation with doxygen (no)], [], [ enable_doxygen=no])
if test "x$enable_doxygen" = xno; then
        enable_doxy=no
else
        enable_doxy=yes
fi
AM_CONDITIONAL(DOXYGEN_DOC, test x$enable_doxy = xyes)

AC_PATH_PROG(DOXYGEN, doxygen, , $PATH)
if test x$DOXYGEN = x; then
  DOXYGEN=doxygen
  echo "*******************************************************"
  echo "***  doxygen not found."
  echo "********************************************************"
fi

AC_SUBST(DOXYGEN)

AC_PATH_PROG(DOT, dot, , $PATH)
if ! test x$DOT = x; then
  DOT_PATH=`dirname $DOT`
  HAVE_DOT=yes
else
  DOT_PATH=/usr/bin
  echo "*******************************************************"
  echo "***  dot not found."
  echo "********************************************************"
  HAVE_DOT=no
fi

AC_SUBST(DOT_PATH)
AC_SUBST(DOT)
AC_SUBST(HAVE_DOT)
])

dnl ------------------------------------------------------------------------

AC_DEFUN([EA_ENABLE_DOCBOOK],[

AC_ARG_ENABLE(docbook, [  --enable-docbook        enable documentation generation with docbook (no)], [], [ enable_docbook=no])
if test "x$enable_docbook" = xno; then
        enable_docbook=no
else
        enable_docbook=yes
fi
AM_CONDITIONAL(DOCBOOK_DOC, test x$enable_docbook = xyes)

possible_paths="/usr/bin /usr/local/bin"
EA_FIND_FILE("xsltproc xmlto", $possible_paths, xsltproc_path, xsltproc_bin)
if test x$xsltproc_path != xNO; then
  XSLTPROC=$xsltproc_path/$xsltproc_bin
  echo "** $XSLTPROC"
else
  XSLTPROC=xsltproc
  echo "*******************************************************"
  echo "***  xsl processor not found."
  echo "********************************************************"
fi

AC_SUBST(XSLTPROC)

# possible_paths="${HOME}/Documents/src/ups/trunk/src/doc/xml"
EA_FIND_FILE("catalog", $possible_paths, catalog_path, catalog_name)
if test x$catalog_path != xNO; then
  EA_PDF_CATALOG=XML_CATALOG_FILES="$catalog_path/$catalog_name"
  echo "** $EA_PDF_CATALOG"
else
  EA_PDF_CATALOG=
  echo "*******************************************************"
  echo "***  no special pdf catalog found."
  echo "********************************************************"
fi

AC_SUBST(EA_PDF_CATALOG)

])

dnl ------------------------------------------------------------------------

AC_DEFUN([EA_ENABLE_UNICODE],
[
AC_ARG_ENABLE(unicode, [  --enable-unicode        generate library with wchar_t/std::wstring instead of char/std::string])

if test x$enable_unicode = xyes; then
  echo "*******************************************************"
  echo "**  Compiling for unicode environment"
  echo "*******************************************************"
  AC_DEFINE(MOCKPP_UNICODE, 1, [Define to compile for unicode environment.])
else
  echo "*******************************************************"
  echo "**  Compiling for non-unicode environment"
  echo "*******************************************************"
  AH_TEMPLATE([MOCKPP_UNICODE],
   [Define to compile for unicode environment.])
fi
])

dnl ------------------------------------------------------------------------

AC_DEFUN([EA_BUILTIN_STL],
[
AC_ARG_ENABLE(builtin_stl, [  --enable-builtin-stl    use built-in mini stl (no)])

if test x$enable_builtin_stl = xyes; then
  echo "*******************************************************"
  echo "**  using builtin mini stl"
  echo "*******************************************************"
  AC_DEFINE(MOCKPP_USE_MINI_STL, 1,  [Define to use built-in mini stl.])
  AC_DEFINE(CXXTEST_USE_MINI_STL, 1, [Define to use built-in mini stl.])
  EA_EXTRA_INC="$EA_EXTRA_INC -I\$(top_srcdir)/3party"
else
  echo "*******************************************************"
  echo "**  using regular stl"
  echo "*******************************************************"
  AH_TEMPLATE([MOCKPP_USE_MINI_STL],    [Define to use built-in mini stl.])
  AH_TEMPLATE([CXXTEST_USE_MINI_STL],   [Define to use built-in mini stl.])
fi
])
AM_CONDITIONAL(BUILTIN_MINISTL, test x$enable_builtin_stl = xyes)

dnl ------------------------------------------------------------------------

AC_DEFUN([EA_BUILTIN_CXXTEST],
[
AC_ARG_ENABLE(builtin_cxxtest, [  --disable-builtin-cxxtest do NOT use built-in cxxtest (no)], [disable_builtin_cxxtest=yes])

if test x$disable_builtin_cxxtest != xyes; then
  echo "*******************************************************"
  echo "**  using builtin cxxtest"
  echo "*******************************************************"
  AC_DEFINE(MOCKPP_USE_BUILTIN_CXXTEST, 1, [Define to use built-in cxxtest.])
  EA_EXTRA_INC="$EA_EXTRA_INC -I\$(top_srcdir)/3party/cxxtest"
#  EA_EXTRA_LIB="$EA_EXTRA_LIB -lmockpp_cxxtest"
  AC_DEFINE(MOCKPP_USE_CXXTEST, 1, [Define if you have CxxTest installed.])
else
  echo "*******************************************************"
  echo "**  NOT using builtin cxxtest"
  echo "*******************************************************"
  AH_TEMPLATE(MOCKPP_USE_CXXTEST, [Define if you have CxxTest installed.])
  AH_TEMPLATE([MOCKPP_USE_BUILTIN_CXXTEST], [Define to use built-in cxxtest.])
fi
])
AM_CONDITIONAL(BUILTIN_CXXTEST, test x$disable_builtin_cxxtest != xyes)

dnl ------------------------------------------------------------------------

AC_DEFUN([EA_DISABLE_NAMESPACE],
[
AC_ARG_ENABLE(namespace, [  --disable-namespace do NOT use namespaces (no)], [disable_namespace=yes])

if test x$disable_namespace != xyes; then
  echo "*******************************************************"
  echo "**  normally using namespaces"
  echo "*******************************************************"
  AH_TEMPLATE([MOCKPP_NO_STD_NUMERICLIMITS], [Define if std::numeric_limits is not working.])
  AH_TEMPLATE([MOCKPP_NO_TYPENAME_FOR_STL_NS], [restricted use of "typedef typename".])
  AH_TEMPLATE([MOCKPP_NO_NAMESPACE],  [Define if you don't use mockpp namespace.])
  AH_TEMPLATE([MINISTL_NO_NAMESPACE], [Define if you don't use ministl namespace.])
  AH_TEMPLATE([CXXTEST_NO_NAMESPACE], [Define if you don't use CxxTest namespace.])
else
  echo "*******************************************************"
  echo "**  NOT using namespaces"
  echo "*******************************************************"
  AC_DEFINE(MOCKPP_NO_STD_NUMERICLIMITS, 1, [Define if std::numeric_limits is not working.])
  AC_DEFINE(MOCKPP_NO_TYPENAME_FOR_STL_NS, 1, [restricted use of "typedef typename".])
  AC_DEFINE(MOCKPP_NO_NAMESPACE,  1, [Define if you don't use mockpp namespace.])
  AC_DEFINE(MINISTL_NO_NAMESPACE, 1, [Define if you don't use ministl namespace.])
  AC_DEFINE(CXXTEST_NO_NAMESPACE, 1, [Define if you don't use CxxTest namespace.])
fi
])
AM_CONDITIONAL(DISABLE_NAMESPACE, test x$disable_namespace != xyes)

dnl ------------------------------------------------------------------------
dnl Find a file (or one of more files in a list of dirs)
dnl params: filename path result(NO = none)
dnl ------------------------------------------------------------------------
dnl
AC_DEFUN([EA_FIND_FILE],
[
MYPATH=`echo $2 | sed s/\:/\ /g`
$3=NO
$4=NO
for i in $MYPATH;
do
  for j in $1;
  do
    echo "configure: __oline__: $i/$j" >&AS_MESSAGE_LOG_FD()
    for f in $i/$j;
    do
      if test -r $f; then
        echo "taking that" >&AS_MESSAGE_LOG_FD()
        $3=$i
        $4=`basename $f`
        break 3
      fi
    done
  done
done
])

# ----------------------------------------------------------------------------

AC_DEFUN([EA_CHECK_MSGFMT],
[
  AC_PATH_PROG(MSGFMT, msgfmt, , $PATH)
  if test x$MSGFMT = x; then
    enable_msgfmt=no
    MSGFMT="echo msgfmt not installed!"
  else
    enable_msgfmt=yes
  fi
AC_SUBST(MSGFMT)
])

# ----------------------------------------------------------------------------

AC_DEFUN([EA_CHECK_WCSCMP],
[
AC_CHECK_LIB(c, wcscmp, [
ac_cv_have_wcscmp=yes
AC_DEFINE(HAVE_WCSCMP, 1, [Define if you have wcscmp])
])
])

# ----------------------------------------------------------------------------

AC_DEFUN([EA_CHECK_STD_WCSCMP],
[

AC_MSG_CHECKING([for std::wcscmp])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

cat > conftest.$ac_ext <<EOF
#include <cwchar>
int main()
{
  return (int) std::wcscmp(0, 0);
}
EOF

ac_compile_link='${CXX} $CXXFLAGS $all_includes $all_libraries $CPPFLAGS conftest.$ac_ext'
if AC_TRY_EVAL(ac_compile_link); then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_STD_WCSCMP, 1, [Define if you have   the std::wcscmp function.])
else
  AC_MSG_RESULT(no)
fi

AC_SUBST(HAVE_STD_WCSCMP)
AC_LANG_RESTORE
])

# ----------------------------------------------------------------------------

AC_DEFUN([EA_CHECK_STD_NUMERICLIMITS],
[

AC_MSG_CHECKING([for std::numeric_limits])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

cat > conftest.$ac_ext <<EOF
#include <limits>
int main()
{
  return (int) std::numeric_limits<unsigned>::max();
}
EOF

ac_compile_link='${CXX} $CXXFLAGS $all_includes $all_libraries $CPPFLAGS conftest.$ac_ext'
if AC_TRY_EVAL(ac_compile_link); then
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(MOCKPP_NO_STD_NUMERICLIMITS, 1, [Define if the std::numeric_limits templates are missing.])
  AC_MSG_RESULT(no)
fi

AC_SUBST(MOCKPP_NO_STD_NUMERICLIMITS)
AC_LANG_RESTORE
])

# ----------------------------------------------------------------------------

AC_DEFUN([EA_CHECK_STD_NS],
[

AC_MSG_CHECKING([for std namespace])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

cat > conftest.$ac_ext <<EOF
#include <string.h>
int main()
{
  using namespace std;
  return 0;
}
EOF

ac_compile_link='${CXX} $CXXFLAGS $all_includes $all_libraries $CPPFLAGS conftest.$ac_ext'
if AC_TRY_EVAL(ac_compile_link); then
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(MOCKPP_NO_STD_NS, 1, [Define if the std namespace is missing.])
  AC_DEFINE(CXXTEST_NO_STD_NS, 1, [Define if the std namespace is missing.])
  AC_DEFINE(MINISTL_NO_STD_NS, 1, [Define if the std namespace is missing.])
  AC_MSG_RESULT(no)
fi

AC_SUBST(MOCKPP_NO_STD_NS)
AC_LANG_RESTORE
])

# ----------------------------------------------------------------------------

AC_DEFUN([AC_C_BIGENDIAN_CROSS],
[AC_CACHE_CHECK(whether byte ordering is bigendian, ac_cv_c_bigendian,
[ac_cv_c_bigendian=unknown
# See if sys/param.h defines the BYTE_ORDER macro.
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/param.h>], [
#if !BYTE_ORDER || !BIG_ENDIAN || !LITTLE_ENDIAN
 bogus endian macros
#endif], [# It does; now see whether it defined to BIG_ENDIAN or not.
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/param.h>], [
#if BYTE_ORDER != BIG_ENDIAN
 not big endian
#endif], ac_cv_c_bigendian=yes, ac_cv_c_bigendian=no)])
if test $ac_cv_c_bigendian = unknown; then
AC_TRY_RUN([main () {
  /* Are we little or big endian?  From Harbison&Steele.  */
  union
  {
    long l;
    char c[sizeof (long)];
  } u;
  u.l = 1;
  exit (u.c[sizeof (long) - 1] == 1);
}], ac_cv_c_bigendian=no, ac_cv_c_bigendian=yes,
[ echo $ac_n "cross-compiling... " 2>&AC_FD_MSG ])
fi])
if test $ac_cv_c_bigendian = unknown; then
AC_MSG_CHECKING(to probe for byte ordering)
[
cat >conftest.c <<EOF
short ascii_mm[] = { 0x4249, 0x4765, 0x6E44, 0x6961, 0x6E53, 0x7953, 0 };
short ascii_ii[] = { 0x694C, 0x5454, 0x656C, 0x6E45, 0x6944, 0x6E61, 0 };
void _ascii() { char* s = (char*) ascii_mm; s = (char*) ascii_ii; }
short ebcdic_ii[] = { 0x89D3, 0xE3E3, 0x8593, 0x95C5, 0x89C4, 0x9581, 0 };
short ebcdic_mm[] = { 0xC2C9, 0xC785, 0x95C4, 0x8981, 0x95E2, 0xA8E2, 0 };
void _ebcdic() { char* s = (char*) ebcdic_mm; s = (char*) ebcdic_ii; }
int main() { _ascii (); _ebcdic (); return 0; }
EOF
] if test -f conftest.c ; then
     if ${CC-cc} -c conftest.c -o conftest.o && test -f conftest.o ; then
        if test `grep -l BIGenDianSyS conftest.o` ; then
           echo $ac_n ' big endian probe OK, ' 1>&AC_FD_MSG
           ac_cv_c_bigendian=yes
        fi
        if test `grep -l LiTTleEnDian conftest.o` ; then
           echo $ac_n ' little endian probe OK, ' 1>&AC_FD_MSG
           if test $ac_cv_c_bigendian = yes ; then
            ac_cv_c_bigendian=unknown;
           else
            ac_cv_c_bigendian=no
           fi
        fi
        echo $ac_n 'guessing bigendian ...  ' >&AC_FD_MSG
     fi
  fi
AC_MSG_RESULT($ac_cv_c_bigendian)
fi
if test $ac_cv_c_bigendian = yes; then
  AC_DEFINE(WORDS_BIGENDIAN, 1, [whether byteorder is bigendian])
  BYTEORDER=4321
else
  BYTEORDER=1234
fi
AC_DEFINE_UNQUOTED(BYTEORDER, $BYTEORDER, [1234 = LIL_ENDIAN, 4321 = BIGENDIAN])
if test $ac_cv_c_bigendian = unknown; then
  AC_MSG_ERROR(unknown endianess - sorry, please pre-set ac_cv_c_bigendian)
fi
])

# ----------------------------------------------------------------------------

AC_CXX_RTTI
AC_C_BIGENDIAN_CROSS

EA_DISABLE_EXCEPTIONS
EA_DISABLE_RTTI
EA_BUILTIN_STL
EA_BUILTIN_CXXTEST
EA_DISABLE_NAMESPACE
EA_ENABLE_DOCBOOK
EA_CHECK_LIBDL
EA_ENABLE_DOXYGEN
EA_ENABLE_UNICODE
EA_CHECK_MSGFMT
EA_CHECK_WSTRING
EA_CHECK_WCSCMP
EA_CHECK_STD_WCSCMP
EA_CHECK_STD_NUMERICLIMITS
EA_CHECK_STD_NS
EA_CHECK_LIBCPPUNIT
EA_CHECK_BOOSTTEST

# TODO
AM_CONDITIONAL(WORKING_QT,    test x = y)
AM_CONDITIONAL(WORKING_X11,   test x = y)
AM_CONDITIONAL(WORKING_WIN32, test x = y)

# ----------------------------------------------------------------------------

AC_PATH_PROG(BZIP2, bzip2, , $PATH)
if test x$BZIP2 = x; then
   echo "********************************************************"
   echo "**  bzip2 not found, existing gzip is assumed instead"

   echo "********************************************************"
   ZIPPER=gzip
   ZIPPER_EXT=gz
else
   ZIPPER=bzip2
   ZIPPER_EXT=bz2
fi
AC_SUBST(ZIPPER)
AC_SUBST(ZIPPER_EXT)

dnl ------------------------------------------------------------------------

possible_paths="${PATH}"
EA_FIND_FILE("pngcrush", $possible_paths, pngcrush_path, pngcrush_bin)
if test x$pngcrush_path != xNO; then
  PNGCRUSH=$pngcrush_path/$pngcrush_bin
  echo "** $PNGCRUSH"
else
  PNGCRUSH=pngcrush
  echo "*******************************************************"
  echo "***  pngcrush not found."
  echo "********************************************************"
fi

AC_SUBST(PNGCRUSH)

# ----------------------------------------------------------------------------

possible_paths="${HOME}/Dokumente/src/ups/trunk/bin/fop-0.94 \
                ${HOME}/Documents/src/ups/trunk/bin/fop-0.94 \
                ${PATH}"
EA_FIND_FILE("fop", $possible_paths, fop_path, fop_bin)
if test x$fop_path != xNO; then
  FOP=$fop_path/$fop_bin
  echo "** $FOP"
else
  FOP=fop
  echo "*******************************************************"
  echo "***  fop processor not found."
  echo "********************************************************"
fi

AC_SUBST(FOP)

# ----------------------------------------------------------------------------

MOCKPP_VERSION_NUMBER=`printf "0x00%02x%02x%02x"  $MOCKPP_MAJOR_VERSION $MOCKPP_MINOR_VERSION $MOCKPP_PATCH_VERSION`
AC_DEFINE_UNQUOTED(MOCKPP_VERSION_NUMBER, [$MOCKPP_VERSION_NUMBER], [version as long int])
AC_SUBST(MOCKPP_VERSION_NUMBER)

AC_CHECK_FUNCS([memmove bcopy mmap getpagesize
                ])
AC_CHECK_HEADERS(limits unistd.h sys/types.h sys/stat.h check.h dlfcn.h fcntl.h \
                  inttypes.h memory.h stdint.h stdlib.h strings.h string.h)
AC_CHECK_HEADERS(machine/limits.h)
AC_CHECK_HEADERS(values.h)
AC_CHECK_HEADERS(cwchar)

AC_SUBST(EA_EXTRA_INC)
AC_SUBST(EA_EXTRA_LIB)

AH_VERBATIM([MOCKPP_VERSION],
[# define MOCKPP_VERSION  VERSION
])

AH_VERBATIM([MOCKPP_PACKAGE],
[# define MOCKPP_PACKAGE  PACKAGE
])

AH_VERBATIM([MOCKPP_UNUSED],
[#define MOCKPP_UNUSED(x) ((void)(x))
])

# ----------------------------------------------------------------------------

AC_ARG_ENABLE(debug, [  --enable-debug (yes)], [mockpp_debug=yes], [mockpp_debug=no])

AH_TEMPLATE([DEBUG],
[Define to turn debugging globally on.])

AH_TEMPLATE([MOCKPP_PTI_WEAKNESS],
[Turn on support for weak template capabilities.])

AH_TEMPLATE([MOCKPP_NO_TEMPLATE_HINT],
[Define if the compiler does not support the template hint.])

# ----------------------------------------------------------------------------

AC_OUTPUT(\
  mockpp.spec \
  mockpp.doxygen \
  mockpp.pc \
  \
  Makefile \
  \
  generator/Makefile \
  generator/mockpp2xml/Makefile \
  generator/xml2mockpp/Makefile \
  generator/xml2mockpp/expat/Makefile \
  generator/xml2mockpp/new-visit-meth/Makefile \
  generator/xml2mockpp/new-chain-meth/Makefile \
  generator/xml2mockpp/orig-visit-meth/Makefile \
  generator/xml2mockpp/orig-chain-meth/Makefile \
  \
  bcb5/Makefile \
  bcb10/Makefile \
  \
  3party/Makefile \
  3party/ministl/Makefile \
  3party/ministl/tests/Makefile \
  \
  3party/cxxtest/Makefile \
  3party/cxxtest/docs/Makefile \
  3party/cxxtest/cxxtest/Makefile \
  \
  config/Makefile \
  tool/Makefile \
  \
  msvc71/Makefile \
  msvc71/lib/Makefile \
  msvc71/mockpp/Makefile \
  msvc71/mockpp/examples/Makefile \
  msvc71/mockpp/examples/tutorial/Makefile \
  msvc71/mockpp/tests/Makefile \
  \
  msvc8/Makefile \
  msvc8/lib/Makefile \
  msvc8/mockpp/Makefile \
  msvc8/generator/Makefile \
  msvc8/mockpp/examples/Makefile \
  msvc8/mockpp/examples/tutorial/Makefile \
  msvc8/mockpp/tests/Makefile \
  \
  mockpp/docs/Makefile \
  mockpp/docs/api/Makefile \
  mockpp/docs/en/Makefile \
  mockpp/docs/en/common/Makefile \
  mockpp/docs/en/images/Makefile \
  mockpp/docs/en/images/callouts/Makefile \
  \
  mockpp/po/Makefile \
  mockpp/config/Makefile \
  mockpp/tests/Makefile \
  mockpp/examples/Makefile \
  mockpp/examples/tutorial/Makefile \
 \
  mockpp/Makefile \
  mockpp/util/Makefile \
  mockpp/compat/Makefile \
  mockpp/visiting/Makefile \
  \
  mockpp/framework/Makefile \
  mockpp/production/Makefile \
  \
  mockpp/chaining/Makefile \
  mockpp/builder/Makefile \
  mockpp/constraint/Makefile \
  mockpp/stub/Makefile \
  mockpp/matcher/Makefile
)

